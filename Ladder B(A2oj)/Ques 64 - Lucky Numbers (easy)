
           import java.awt.Point;
           import java.io.InputStreamReader;
            import java.io.BufferedReader;
            import java.io.IOException; 
            import java.lang.reflect.Array;
            import java.util.ArrayList;
            import java.util.Arrays;
            import java.util.Collections;
            import java.util.HashMap;
            import java.util.HashSet;
            import java.util.Iterator;
            import java.util.List;
            import java.util.Map;
            import java.util.Optional;
            import java.util.Set;
            import java.util.TreeMap;
import java.util.TreeSet;
 
 
 
              public class Codeforces {
 
                  public static void main(String[] args) throws IOException {
                  BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
                  Long n = Long.parseLong(br.readLine());
                  String number = String.valueOf(n);
                  int k = number.length();
                  
                  
                  
                  
                  HashSet<Long> set = new HashSet<>();
                  long a = 4;
                  long b = 7;
                  set.add(a);
                  set.add(b);
                  
                  TreeSet<Long> res = new TreeSet<>();
                  
                 
                 
                  while(true){
                    permute(set, " ", 2, k, res);
                    for(long i : res){
                      
                      if(i >= n){
                          System.out.println(i);
                          System.exit(0);
                      }
                  }
                   res.clear();
                   k += 1;
                  }
                  
                  
                  
                  
                 
                  
                  
                  
                  
                  }
                  
                  public static void permute(HashSet<Long> set, String prefix, int n, int k, TreeSet<Long> res){
                   
                      if(k == 0){
                          int count4 = 0;
                          int count7 = 0;
                          for(char c : prefix.trim().toCharArray()){
                              if(c == '4') count4++;
                              else count7++;
                          }
                          
                          Long num = Long.parseLong(prefix.trim());
                          
                          if(count4 == count7)res.add(num);
                          
                          return;
                      }
                      
                      for(Long i : set){
                          String newPrefix = String.valueOf(i) + prefix;
                          
                          permute(set, newPrefix, n, k - 1, res);
                      }
                  }
              }

              
                 
                    
                 
                  
                  
